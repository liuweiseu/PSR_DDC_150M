##-----------------------------------------------------------------------------
## Title      : Xilinx LogiCORE Virtex-6 Embedded Tri-Mode Ethernet MAC Example
##              Constraints File
## Project    : Xilinx LogiCORE Virtex-6 Embedded Tri-Mode Ethernet MAC
## File       : v6_emac_v2_3_example_design.ucf
## Version    : 2.3
##-----------------------------------------------------------------------------
##
## (c) Copyright 2011 Xilinx, Inc. All rights reserved.
##
## This file contains confidential and proprietary information
## of Xilinx, Inc. and is protected under U.S. and
## international copyright and other intellectual property
## laws.
##
## DISCLAIMER
## This disclaimer is not a license and does not grant any
## rights to the materials distributed herewith. Except as
## otherwise provided in a valid license issued to you by
## Xilinx, and to the maximum extent permitted by applicable
## law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
## WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
## AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
## BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
## INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
## (2) Xilinx shall not be liable (whether in contract or tort,
## including negligence, or under any other theory of
## liability) for any loss or damage of any kind or nature
## related to, arising under or in connection with these
## materials, including for any direct, or any indirect,
## special, incidental, or consequential loss or damage
## (including loss of data, profits, goodwill, or any type of
## loss or damage suffered as a result of any action brought
## by a third party) even if such damage or loss was
## reasonably foreseeable or Xilinx had been advised of the
## possibility of the same.
##
## CRITICAL APPLICATIONS
## Xilinx products are not designed or intended to be fail-
## safe, or for use in any application requiring fail-safe
## performance, such as life-support or safety devices or
## systems, Class III medical devices, nuclear facilities,
## applications related to the deployment of airbags, or any
## other applications that could lead to death, personal
## injury, or severe property or environmental damage
## (individually and collectively, "Critical
## Applications"). Customer assumes the sole risk and
## liability of any use of Xilinx products in Critical
## Applications, subject only to applicable laws and
## regulations governing limitations on product liability.
##
## THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
## PART OF THIS FILE AT ALL TIMES.
##
##-----------------------------------------------------------------------------
## Description:  This is an example constraints file for the Virtex-6 Embedded
##               Tri-Mode Ethernet MAC. It is designed to apply to the
##               example design hierarchical level. In general, the constraints
##               in this file are necessary to implement a correctly-
##               functioning Ethernet MAC, and some constraints must be
##               modified according to your specific design and pinout choices.
##-----------------------------------------------------------------------------

# The xc6vlx240tff1156-1 part is chosen for this example design.
# this is the chosen device on the ML605 demonstration platform.
# This value should be modified to match your device.
CONFIG PART = xc6vlx240tff1156-1;

#
####
#######
##########
#############
#################
## System level constraints

########## ML605 Board ##########
#Net  clk_in_p        LOC = J9   | IOSTANDARD = LVDS_25  | DIFF_TERM = TRUE;
#Net  clk_in_n        LOC = H9   | IOSTANDARD = LVDS_25  | DIFF_TERM = TRUE;

NET "clk_in" LOC = A10;

#Net glbl_rst         LOC = H10  | IOSTANDARD = LVCMOS15 | TIG;
#
##### Module LEDs_8Bit constraints
#Net frame_error      LOC = AH28 | IOSTANDARD = LVCMOS25;
#Net frame_errorn     LOC = AH27 | IOSTANDARD = LVCMOS25;
#
##### Module Push_Buttons_4Bit constraints
#Net update_speed     LOC = G26  | IOSTANDARD = LVCMOS15;
#Net serial_command   LOC = G17  | IOSTANDARD = LVCMOS15;
#Net pause_req_s      LOC = A19  | IOSTANDARD = LVCMOS15;
#Net reset_error      LOC = A18  | IOSTANDARD = LVCMOS15;
#
##### Module DIP_Switches_4Bit constraints
#Net mac_speed<0>     LOC = D22  | IOSTANDARD = LVCMOS15;
#Net mac_speed<1>     LOC = C22  | IOSTANDARD = LVCMOS15;
#Net gen_tx_data      LOC = L21  | IOSTANDARD = LVCMOS15;
#Net chk_tx_data      LOC = L20  | IOSTANDARD = LVCMOS15;
#Net swap_address     LOC = C18  | IOSTANDARD = LVCMOS15;

NET "phy_resetn" TIG;
NET "phy_resetn" LOC = Y29;
NET "phy_resetn" IOSTANDARD = LVCMOS25;
# lock to unused header
#Net serial_response  LOC = AN23 | IOSTANDARD = LVCMOS25;
#Net tx_statistics_s  LOC = AP22 | IOSTANDARD = LVCMOS25;
#Net rx_statistics_s  LOC = AG21 | IOSTANDARD = LVCMOS25;

NET "rgmii_rxd[3]" LOC = U27;
NET "rgmii_rxd[3]" IOSTANDARD = LVCMOS25;
NET "rgmii_rxd[2]" LOC = V27;
NET "rgmii_rxd[2]" IOSTANDARD = LVCMOS25;
NET "rgmii_rxd[1]" LOC = W25;
NET "rgmii_rxd[1]" IOSTANDARD = LVCMOS25;
NET "rgmii_rxd[0]" LOC = Y27;
NET "rgmii_rxd[0]" IOSTANDARD = LVCMOS25;

NET "rgmii_txd[3]" LOC = U32;
NET "rgmii_txd[3]" IOSTANDARD = LVCMOS25;
NET "rgmii_txd[2]" LOC = Y33;
NET "rgmii_txd[2]" IOSTANDARD = LVCMOS25;
NET "rgmii_txd[1]" LOC = W34;
NET "rgmii_txd[1]" IOSTANDARD = LVCMOS25;
NET "rgmii_txd[0]" LOC = W32;
NET "rgmii_txd[0]" IOSTANDARD = LVCMOS25;

NET "rgmii_tx_ctl" LOC = U30;
NET "rgmii_tx_ctl" IOSTANDARD = LVCMOS25;
NET "rgmii_txc" LOC = V25;
NET "rgmii_txc" IOSTANDARD = LVCMOS25;

NET "rgmii_rx_ctl" LOC = W29;
NET "rgmii_rx_ctl" IOSTANDARD = LVCMOS25;
# P20 - GCLK7
NET "rgmii_rxc" LOC = T34;
NET "rgmii_rxc" IOSTANDARD = LVCMOS25;

#
####
#######
##########
#############
#################
#EXAMPLE DESIGN CONSTRAINTS

############################################################
# Clock Period Constraints                                 #
############################################################
###############################################################################
# CLOCK CONSTRAINTS
# The following constraints are required. If you choose to not use the example
# design level of wrapper hierarchy, the net names should be translated to
# match your design.
###############################################################################
#NET "clk_in_p" TNM_NET = "clk_in_p";
#TIMESPEC "TS_v6_emac_v2_3_clk_in_p" = PERIOD "clk_in_p" 5.000 ns HIGH 50% INPUT_JITTER 50.0ps;
NET "clk_in" TNM_NET = "clk_in";
TIMESPEC TS_v6_emac_gmii_core_clk_in = PERIOD "clk_in" 50 ns HIGH 50 % INPUT_JITTER 50 ps;


# Ethernet GTX_CLK high quality 125 MHz reference clock
NET "U12/gtx_clk_bufg" TNM_NET = "ref_gtx_clk";
TIMEGRP v6_emac_v2_3_clk_ref_gtx =  "ref_gtx_clk";
TIMESPEC TS_v6_emac_v2_3_clk_ref_gtx = PERIOD "v6_emac_v2_3_clk_ref_gtx" 8 ns HIGH 50 %;

# Ethernet RGMII PHY-side transmit clock
NET "*tx_mac_aclk*" TNM_NET = "clk_tx_mac";
TIMEGRP v6_emac_v2_3_clk_phy_tx =  "clk_tx_mac";
TIMESPEC TS_v6_emac_v2_3_clk_phy_tx = PERIOD "v6_emac_v2_3_clk_phy_tx" 8 ns HIGH 50 %;

# Ethernet RGMII PHY-side receive clock
NET "rgmii_rxc" TNM_NET = "phy_clk_rx";
TIMEGRP v6_emac_v2_3_clk_phy_rx =  "phy_clk_rx";
TIMESPEC TS_v6_emac_v2_3_clk_phy_rx = PERIOD "v6_emac_v2_3_clk_phy_rx" 8 ns HIGH 50 %;

# Constrain the host interface clock to an example frequency of 125 MHz
NET "*s_axi_aclk" TNM_NET = "clk_axi";
TIMEGRP v6_emac_v2_3_config_clk =  "clk_axi";
TIMESPEC TS_v6_emac_v2_3_config_clk = PERIOD "v6_emac_v2_3_config_clk" 8 ns HIGH 50 %;

# define TIGs between unrelated clock domains
TIMESPEC TS_clock_path_gtx2cpu = FROM "clock_generator_clkout0" TO "clock_generator_clkout1" TIG ;
TIMESPEC TS_clock_path_gtx2ref = FROM "clock_generator_clkout0" TO "clock_generator_clkout2" TIG ;
TIMESPEC TS_clock_path_cpu2gtx = FROM "clock_generator_clkout1" TO "clock_generator_clkout0" TIG ;

# define TIGs on reset synchronizer FDPE PRE inputs
PIN "*reset_sync1.PRE" TIG;
PIN "*reset_sync2.PRE" TIG;
PIN "*v6emac_core.glbl_rstn" TIG;
####
#######
##########
#############
#################
#FIFO BLOCK CONSTRAINTS


###############################################################################
# AXI FIFO CONSTRAINTS
# The following constraints are necessary for proper operation of the AXI
# FIFO. If you choose to not use the FIFO Block level of wrapper hierarchy,
# these constraints should be removed.
###############################################################################

# AXI FIFO transmit-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*user_side_FIFO?tx_fifo_i?rd_tran_frame_tog" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_retran_frame_tog" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_col_window_pipe_1" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_addr_txfer*" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_txfer_tog" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?wr_frame_in_fifo" TNM = "tx_fifo_wr_to_rd";

TIMESPEC TS_tx_fifo_rd_to_wr = FROM "tx_fifo_rd_to_wr" TO "v6_emac_v2_3_clk_phy_tx" 8 ns DATAPATHONLY;
TIMESPEC TS_tx_fifo_wr_to_rd = FROM "tx_fifo_wr_to_rd" TO "v6_emac_v2_3_clk_phy_tx" 8 ns DATAPATHONLY;

# Reduce clock period to allow for metastability settling time
INST "*user_side_FIFO?tx_fifo_i?wr_rd_addr*" TNM = "tx_metastable";
INST "*user_side_FIFO?tx_fifo_i?wr_col_window_pipe_0" TNM = "tx_metastable";
TIMESPEC TS_tx_meta_protect = FROM "tx_metastable" 5 ns DATAPATHONLY;

# Transmit-side AXI FIFO address bus timing
INST "*user_side_FIFO?tx_fifo_i?rd_addr_txfer*" TNM = "tx_addr_rd";
INST "*user_side_FIFO?tx_fifo_i?wr_rd_addr*" TNM = "tx_addr_wr";
TIMESPEC TS_tx_fifo_addr = FROM "tx_addr_rd" TO "tx_addr_wr" 10 ns;

# AXI FIFO receive-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*user_side_FIFO?rx_fifo_i?wr_store_frame_tog" TNM = "rx_fifo_wr_to_rd";
INST "*user_side_FIFO?rx_fifo_i?rd_addr*" TNM = "rx_fifo_rd_to_wr";

TIMESPEC TS_rx_fifo_wr_to_rd = FROM "rx_fifo_wr_to_rd" TO "v6_emac_v2_3_clk_phy_tx" 8 ns DATAPATHONLY;
TIMESPEC TS_rx_fifo_rd_to_wr = FROM "rx_fifo_rd_to_wr" TO "v6_emac_v2_3_clk_phy_rx" 8 ns DATAPATHONLY;


#
####
#######
##########
#############
#################
#BLOCK CONSTRAINTS

# Locate the Tri-Mode Ethernet MAC instance
INST "U12/v6emac_fifo_block/v6emac_block/v6emac_core/BU2/U0/v6_emac" LOC = TEMAC_X0Y1;
#INST "v6emac_fifo_block/v6emac_block/v6emac_core/BU2/U0/v6_emac" LOC = "TEMAC_X0Y0";

###############################################################################
# PHYSICAL INTERFACE CONSTRAINTS
# The following constraints are necessary for proper operation, and are tuned
# for this example design. They should be modified to suit your design.
###############################################################################

# RGMII physical interface constraints
# -----------------------------------------------------------------------------

# Set the IDELAY and ODELAY values, tuned for this example design.
# These values should be modified to suit your design.
INST "U12/v6emac_fifo_block/v6emac_block/rgmii_interface/delay_rgmii_rx_ctl" IDELAY_VALUE = 11;
#INST "*v6emac_block*rgmii_interface*delay_rgmii_rxd"    IDELAY_VALUE = 23;
INST "U12/v6emac_fifo_block/v6emac_block/rgmii_interface/rxdata_bus[0].delay_rgmii_rxd" IDELAY_VALUE = 14;
INST "U12/v6emac_fifo_block/v6emac_block/rgmii_interface/rxdata_bus[1].delay_rgmii_rxd" IDELAY_VALUE = 14;
INST "U12/v6emac_fifo_block/v6emac_block/rgmii_interface/rxdata_bus[2].delay_rgmii_rxd" IDELAY_VALUE = 14;
INST "U12/v6emac_fifo_block/v6emac_block/rgmii_interface/rxdata_bus[3].delay_rgmii_rxd" IDELAY_VALUE = 14;
INST "U12/v6emac_fifo_block/v6emac_block/rgmii_interface/delay_rgmii_tx_clk" ODELAY_VALUE = 6;
INST "U12/v6emac_fifo_block/v6emac_block/rgmii_interface/delay_rgmii_tx_clk" SIGNAL_PATTERN = CLOCK;

# Group all IODELAY-related blocks to use a single IDELAYCTRL
INST "*dlyctrl" IODELAY_GROUP = "rgmii_iodelay";
INST "*v6emac_block*rgmii_interface*delay_rgmii_rx_ctl" IODELAY_GROUP = "rgmii_iodelay";
INST "*v6emac_block*rgmii_interface*delay_rgmii_rxd" IODELAY_GROUP = "rgmii_iodelay";
INST "*v6emac_block*rgmii_interface*delay_rgmii_tx_clk" IODELAY_GROUP = "rgmii_iodelay";

# The following constraints work in conjunction with IDELAY_VALUE settings to
# check that the RGMII receive bus remains in alignment with the rising and
# falling edges of RGMII_RXC, to within 1 ns setup time and 1 ns hold time.
INST "rgmii_rxd[?]" TNM = "rgmii_rx";
INST "rgmii_rx_ctl" TNM = "rgmii_rx";
TIMEGRP "rgmii_rx" OFFSET = IN 1 ns VALID 2 ns BEFORE "rgmii_rxc" RISING;
TIMEGRP "rgmii_rx" OFFSET = IN 1 ns VALID 2 ns BEFORE "rgmii_rxc" FALLING;

# Location constraints are chosen for this example design.
# These values should be modified to suit your design.
# * Note that regional clocking imposes certain requirements
#   on the location of the physical interface pins and the TEMAC instance.
#   Please refer to the Virtex-6 FPGA Embedded Tri-Mode Ethernet MAC
#   User Guide for additional details. *

# Locate the RGMII physical interface pins and IDELAYCTRL element


#INST "*bufg_tx_axi_clk" LOC = "BUFGCTRL_X0Y2";

